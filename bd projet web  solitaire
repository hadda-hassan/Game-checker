CREATE TABLE COUP(
IdCoup NUMBER CONSTRAINT pk_Coup PRIMARY KEY,
IdBille NUMBER,
IdPartie NUMBER,
IdCase_d NUMBER,
IdCase_a NUMBER,
CONSTRAINT fk_IdBille_c foreign key (idBille) references Bille (idBille),
CONSTRAINT fk_IdPartie_c foreign key (idPartie) references Partie (idPartie),
CONSTRAINT fk_IdCase_d_c foreign key (idCase_d) references Casegame (idCase),
CONSTRAINT fk_IdCase_a_c foreign key (idCase_a) references Casegame (idCase)
);
-----------------------------------------------------------------------
--creation de sequence 
CREATE SEQUENCE sq_IdPartie START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE sq_Idcoup START WITH 1 INCREMENT BY 1;
-------------------------------------------------------------------------------------------------------
---creation de tables 
--TABLE Niveau
------------------------------------------------------------------------------------------------
CREATE TABLE Niveau(
IdNiveau NUMBER(10) CONSTRAINT pk_niveau PRIMARY KEY,
nbCasePleine NUMBER(10),
CONSTRAINT ck_niveau CHECK (IdNiveau IN (1,2,3,4))
);
-------------------------------------------------------------------------------------------------
-- TABLE Joueur
----------------------------------------------------------------------------------------------------
CREATE TABLE Joueur(
email VARCHAR(30) CONSTRAINT pk_joueur PRIMARY KEY,
mdp VARCHAR(10) CONSTRAINT nn_mdp NOT NULL,--obliger l'utilisateur d'avoir un mot de passe 
Nom VARCHAR(20) ,
Prenom VARCHAR(20) ,
IdNiveau NUMBER(5) CONSTRAINT fk_niv_jeux REFERENCES Niveau(IdNiveau) -- le niveau max atteint par le joueur 

);
------------------------------------------------------------------------------------------------
--TABLE Partie
------------------------------------------------------------------------------------------------
CREATE TABLE Partie(
IdPartie NUMBER ,-- type qui s'auto-incremente avec saisie manuelle possible si necessaire
HDebut VARCHAR(10),
HFin VARCHAR(10),
DateP DATE,
Score NUMBER(10),
Etat VARCHAR(10) CONSTRAINT ck_Etat CHECK(Etat IN ('GAGNE','PERDU')),
email CONSTRAINT fk_email REFERENCES Joueur(email),
CONSTRAINT pk_partie PRIMARY KEY(IdPartie,email)
);
-------------------------------------------------------------------------------------------------
--TBALE Bille
-------------------------------------------------------------------------------------------------------
CREATE TABLE Bille(
IdBille NUMBER,
--Image VARCHAR(100),
constraint pk_bille PRIMARY KEY (IdBille)
);
--------------------------------------------------------------------------------------------------------
--TABLE CaseCarte
---------------------------------------------------------------------------------------------------
CREATE TABLE Casegame(
IdCase NUMBER ,
IdBille  NUMBER,
position_x VARCHAR(50) CONSTRAINT nn_x NOT NULL,
position_y VARCHAR(50) CONSTRAINT nn_y NOT NULL ,
EtatCase VARCHAR(10),
CONSTRAINT ck_EtatCase CHECK(EtatCase IN ('Pleine','Vide')),
constraint pk_CaseB PRIMARY KEY (IdCase),
constraint fk_Bille foreign key (IdBille) references Bille (IdBille)
);
------------------------------------------------------------------------------------------------------
--TABLE Coup
------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------
--TABLE Contenir
------------------------------------------------------------------------------------------------------
CREATE TABLE Contenir(
IdNiveau NUMBER(10),
IdCase NUMBER,
CONSTRAINT pkContenir PRIMARY KEY (IdNiveau, IdCase),
CONSTRAINT IdNiveau_cont foreign key (IdNiveau) references Niveau (IdNiveau),
CONSTRAINT IdCase_cont foreign key (IdCase) references Casegame  (IdCase)
);

------------------------------------------------------------------------------------------------------
-------------procedur
create or replace procedure()as
begin
end/;

create or replace procedure()as
begin
end/;

create or replace procedure()as
begin
end;

-------trigger
CREATE [OR REPLACE ] TRIGGER trigger_name  
{BEFORE | AFTER | INSTEAD OF }  
{INSERT [OR] | UPDATE [OR] | DELETE}  
[OF col_name]  
ON table_name  
[REFERENCING OLD AS o NEW AS n]  
[FOR EACH ROW]  
WHEN (condition)   
DECLARE 
   Declaration-statements 
BEGIN  
   Executable-statements 
EXCEPTION 
   Exception-handling-statements 
End;

GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable1> TO gdn2950a;
GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable2> TO gdn2950a;
GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable3> TO gdn2950a;
GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable4> TO gdn2950a;
GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable5> TO gdn2950a;
GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable6> TO gdn2950a;
GRANT SELECT, INSERT, UPDATE, DELETE ON <nomtable7> TO gdn2950a;


